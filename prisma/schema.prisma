generator client {
  provider        = "prisma-client-js"
  output          = "."
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum unit {
  KG
  G
  LITRE
  ML
  PC
  DOZEN
  PACKET
  METER
  CENTIMETER
  INCH
  FEET
}

model Admin {
  id             String   @id @default(uuid())
  name           String?
  email          String?  @unique
  mobile         String?
  profileURL     String?
  isActive       Boolean  @default(true)
  isProductOwner Boolean  @default(false)
  address        String?
  pincode        String?
  password       String
  city           String?  @default("Coimbatore")
  state          String?  @default("Tamil Nadu")
  country        String?  @default("India")
  lastLogin      DateTime
  image          String?

  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id            String      @id @default(uuid())
  name          String
  unit          unit
  volume        Int
  packSize      Int
  originalPrice Int
  discountPrice Int
  ImageUrl      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  feedback      Feedback[]
  orderItem     OrderItem[]
}

model Orders {
  id         String      @id @default(uuid())
  orderId    String
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int

  order   Orders   @relation(fields: [orderId], references: [id])
  product Products @relation(fields: [productId], references: [id])
}

model ContactRequests {
  id          String   @id @default(uuid())
  name        String
  mobile      String
  email       String
  packingType String
  units       String
  Venue       String
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Admin    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  rating    Int
  feedback  String?
  productId String
  products  Products @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
